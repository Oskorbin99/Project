<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_rogue</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>o_creature</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();  // наследуем уже написанное в этом событии в родительских обьектах

mp_grid_add_instances(movement_grid, o_wall, 0); // добавляем в препятствия для сетки поиска пути стену ...
mp_grid_add_instances(movement_grid, o_rat, 0); // ... и крысу

movement_path = path_add(); // создаем путь

movement_position = 0; // 
movement_points_max = 6; // макс. очки движения (то есть очки действия)
movement_points = movement_points_max; // текущие ОД
movement_points_start = movement_points; // начальные ОД

spd = 4; // скорость перемещения спрайта при движении между клетками 

image_index = 126
image_speed = 0

hp_max = 100;
hp = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !global.game_pause // если игра не на паузе
{
    // координаты в нашей сетке движения
    grid_x = ((x - (cell_width/2)) div cell_width)
    grid_y = ((y - (cell_height/2)) div cell_height)
    
    
    /****************************************************
      Если герой движется
    ****************************************************/
     
    if move
    {
        var i, size, xx, yy, xshift, yshift;
        size = path_get_number(movement_path); // 
        xx = path_get_point_x(movement_path, movement_position); // 
        yy = path_get_point_y(movement_path, movement_position);
        xshift = xx - x; // 
        yshift = yy - y;
        x += sign(xshift) * spd * (abs(xshift) &gt; spd) + (xshift) * (abs(xshift) &lt;= spd); // 
        y += sign(yshift) * spd * (abs(yshift) &gt; spd) + (yshift) * (abs(yshift) &lt;= spd);
        
        if x == xx and y == yy // 
        {
            if stop or movement_position + 1 &gt;= size or movement_points = 0 // 
            {
                move = false; // 
            }
            else // 
            {
                movement_position += 1; // 
                movement_points -= 1; // 
            }
        }
        
        if xshift != 0 image_xscale = sign(xshift) // ДЛЯ РИСОВАЛКИ
    }
    
    
    /****************************************************
      Прокладывание пути в направлении мышки
    ****************************************************/
     
    var mx, my, path;
    mx = ((mouse_x - (cell_width/2)) div cell_width) * cell_width + (cell_width); // нормируем координаты мыши по сетке
    my = ((mouse_y - (cell_height/2)) div cell_height) * cell_height + (cell_height);
    path = false;
    if place_free(mx, my) and !move // если место свободно и мы не двигаемся, то ...
    {
        path = mp_grid_path(movement_grid, movement_path, x, y, mx, my, 1); // ... создаем путь из наших координат в координаты, где расположена мышь
        // path_normalize(movement_path);
    }
    
    if path // если путь существует, то ...
    {
        movement_points_start = movement_points; // ... стартовые ОД = текущие ОД
        can_move = true; // ... и можно двигаться
    }
    else
    {
        can_move = false; // если же путь не существует, то двигаться нельзя
    }
    
    
    /****************************************************
      Все приготовления сделаны, теперь только ждем клика мышкой
    ****************************************************/
     
    if mouse_check_button_pressed(mb_left) 
    {
        if can_move and movement_points &gt; 0 // если можем двигаться и ОД больше нуля
        {
            move = true; // двигаемся (много двигаемся)
            stop = false; 
            movement_position = 0; // 
        }
    }
    
    if mouse_check_button_pressed(mb_right) 
    {
        stop = true; // остановка
    }
    
    if keyboard_check_pressed(vk_space) 
    {
        movement_points = movement_points_max; // восстанавливаем ОД
    }
    
    /*
    if mouse_wheel_up()
    {
        movement_points_max += 1; 
    }
    
    if mouse_wheel_down()
    {
        if movement_points_max &gt; 0
            movement_points_max -= 1; 
    }
    */

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* if can_move or move // ���� ����� ����� ��������� ��� �� ��� ��������
{
    // draw_path(movement_path, x, y, 1); // ������ ����
    var i, size, xx, yy;
    size = path_get_number(movement_path); // ��������� ���-�� ����� � ����
    for (i = 0; i &lt; size; i += 1)
    {
        xx = path_get_point_x(movement_path, i); // ��������� ������� ������� �����
        yy = path_get_point_y(movement_path, i);
        if i &lt;= movement_points_start // ���� �� ��� ����� ����� ������� ����� ��������, ��..
        {
            draw_set_color(c_green); // ������ ������������� ������ ������
        }
        else
        {
            draw_set_color(c_red); // ����� - ������ ������������� ������� ������
        }
        
        draw_set_alpha(0.3);
        //draw_rectangle(xx - cell_width/2, yy - cell_height/2, xx + cell_width/2, yy + cell_height/2, 0); // ������ �������������
        
        draw_set_color(c_black);
        draw_set_alpha(1);
        //draw_circle(xx, yy, 2, 0); // ������ ����� ����
    }
} */

if move // если двигаемся - включаем анимацию движения
{
    if image_index &lt; 128 or image_index &gt;= 133 {image_index = 128}
    image_speed = 0.75
}
else  // если стоит - включаем статичный спрайт
{
    image_index = 126
    image_speed = 0
}

// рисуем собственный спрайт
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
