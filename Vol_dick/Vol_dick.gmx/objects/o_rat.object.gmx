<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_rat</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

mp_grid_add_instances(movement_grid, o_wall, 0); // ��������� ����������� � �����
mp_grid_add_instances(movement_grid, o_hero, 0);

movement_path = path_add(); // ������ ���� ��� �����

movement_position = 0; // � ����� ����� ���� ��������� �����?
movement_points_max = 3; // ������������ ���-�� ����� ��������
movement_points = movement_points_max; // ������� ���-�� ����� ��������
movement_points_start = movement_points; // ���-�� ����� �������� ����� ������� ��������, ������������ ��� ��������� ����

spd = 4; // �������� �������� �����

image_index = 0
image_speed = 0

hp = 100
hp_max = 100
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grid_x = ((x - (cell_width/2)) div cell_width)
grid_y = ((y - (cell_height/2)) div cell_height)

/***************************************************
  ��������
 ***************************************************/
if move
{
    var i, size, xx, yy, xshift, yshift;
    size = path_get_number(movement_path); // ��������� ���-�� ����� � ����
    xx = path_get_point_x(movement_path, movement_position); // ��������� �������, � ������� ������ ��������� ������� �����
    yy = path_get_point_y(movement_path, movement_position);
    xshift = xx - x; // ��������� �������� ���� ������� ������������ �����
    yshift = yy - y;
    x += sign(xshift) * spd * (abs(xshift) &gt; spd) + (xshift) * (abs(xshift) &lt;= spd); // �������� �����, ����� ������� ��� ��������� ������� ������� - scr_hero_move
    y += sign(yshift) * spd * (abs(yshift) &gt; spd) + (yshift) * (abs(yshift) &lt;= spd);
    
    if x == xx and y == yy // ���� ����� ������ ������ ������
    {
        if stop or movement_position + 1 &gt;= size or movement_points = 0 // ���� ����� ����� �����������, ��� �� ����� �� ����� ����, ��� � ���� ����� ��� ����� ��������
        {
            move = false; // ������������� �����
        }
        else // ���� ����� ����� ���������� ��������, ��...
        {
            movement_position += 1; // ���������, ��� ����� ������ ��������� � ��������� ����� ����
            movement_points -= 1; // ��������� ���-�� ����� ��������
        }
    }
    
    if xshift != 0 image_xscale = sign(xshift) // ДЛЯ РИСОВАЛКИ
}

if instance_exists(o_hero)
{
    if abs(grid_x - o_hero.grid_x) &lt;= 1 &amp;&amp; abs(grid_y - o_hero.grid_y) &lt;= 1
    {
        for (var i = 0; i &lt;= movement_points; i++)
        {
            o_rat_attack(self, o_hero);
        }
    }
    else
    {
        var mx, my, path;
        mx = ((o_hero.x - (cell_width/2)) div cell_width) * cell_width + (cell_width); // ���������� ���������� ������, �� ������� ����� ���� ����
        my = ((o_hero.y - (cell_height/2)) div cell_height) * cell_height + (cell_height);
        path = false;
        
        if !move // ���� ������� ����� �� �������� � � ������� ���� ��� �����, ��...
        {
            path = mp_grid_path(movement_grid, movement_path, x, y, mx, my, 1); // ��������� ���� � ��������� �������
            //path_normalize(movement_path);
        }
        
        if path // ���� ������� ��������� ����
        {
            movement_points_start = movement_points; // ���������� ���-�� ����� ��������
            can_move = true; // ���������, ��� ����� ����� ��������� �� ����
        }
        else
        {
            can_move = false; // ����� - ���������, ��� ����� �� ����� ��������� �� ����
        }
        
        if can_move and movement_points &gt; 0 // ���� ������� ����� ����� ��������� � � ���� ���� ���� ��������
        {
            move = true; // ���������, ��� ����� ���������
            stop = false; // ���������, ��� ����� �� ����� ������������
            movement_position = 0; // �������� ����� ����� �� ����, � ������� �������� �����
        }
    }
    
}

if keyboard_check_pressed(vk_space) // ���� ����� ����� ������, ��...
{
    if movement_points = 0 movement_points = movement_points_max; // ��������� ���-�� ����� ��������
}
    
if mouse_check_button_pressed(mb_left) &amp;&amp; position_meeting(mouse_x, mouse_y, self) // ���� ����� ������� ������, ��...
{
    o_hero_attack(o_hero, self);
}

show_debug_message(hp)

if hp &lt;= 0 
{
    instance_destroy();
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if can_move or move // ���� ����� ����� ��������� ��� �� ��� ��������
{
    // draw_path(movement_path, x, y, 1); // ������ ����
    var i, size, xx, yy;
    size = path_get_number(movement_path); // ��������� ���-�� ����� � ����
    for (i = 0; i &lt; size; i += 1)
    {
        xx = path_get_point_x(movement_path, i); // ��������� ������� ������� �����
        yy = path_get_point_y(movement_path, i);
        if i &lt;= movement_points_start // ���� �� ��� ����� ����� ������� ����� ��������, ��..
        {
            draw_set_color(c_green); // ������ ������������� ������ ������
        }
        else
        {
            draw_set_color(c_red); // ����� - ������ ������������� ������� ������
        }
        
        draw_set_alpha(0.3);
        //draw_rectangle(xx - cell_width/2, yy - cell_height/2, xx + cell_width/2, yy + cell_height/2, 0); // ������ �������������
        
        draw_set_color(c_black);
        draw_set_alpha(1);
        //draw_circle(xx, yy, 2, 0); // ������ ����� ����
    }
}

if move 
{
    if image_index &lt; 6 or image_index &gt;= 10 {image_index = 6}
    image_speed = 0.75
}
else
{
    image_index = 0
    image_speed = 0
}

// ������ ������ ������
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
